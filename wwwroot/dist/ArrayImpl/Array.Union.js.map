{"version":3,"sources":["ArrayImpl/Array.Union.ts"],"names":[],"mappings":"AACA,KAAK,CAAC,SAAS,CAAC,KAAK,GAAG;IACvB,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACtD,IAAI,QAAQ,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC;QAClC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;QACd,CAAC,CAAC;YACD,MAAM,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,IAAI,CAAC,EAAN,CAAM;SACvB,CAAC;IAEJ,IAAI,QAAQ,GAAG,UAAC,KAAK,EAAE,KAAK;QAC3B,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,OAAO,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC;YAEzB,IAAI,CAAC,GAAG,CAAC,CAAC;YACV,IAAI,KAAK,GAAG,KAAK,CAAC;YAClB,OAAO,CAAC,GAAG,KAAK,CAAC,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC;gBACnC,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACzC,KAAK,GAAG,IAAI,CAAC;gBACd,CAAC;gBACD,CAAC,EAAE,CAAC;YACL,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACZ,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACtB,CAAC;YACD,CAAC,EAAE,CAAC;QACL,CAAC;IACF,CAAC,CAAA;IAED,IAAI,MAAM,GAAG,EAAE,CAAC;IAEhB,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACvB,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAEzB,MAAM,CAAC,MAAM,CAAC;AACf,CAAC,CAAA","file":"Array.Union.js","sourcesContent":["// Produces the set union of two sequences\r\nArray.prototype.union = function() {\r\n\tvar second = arguments.length > 0 ? arguments[0] : [];\r\n\tvar comparer = arguments.length > 1\r\n\t\t? arguments[1]\r\n\t\t: {\r\n\t\t\tequals: (x, y) => x == y\r\n\t\t\t};\r\n\r\n\tvar distinct = (group, array) => {\r\n\t\tvar i = 0;\r\n\t\twhile (i < array.length) {\r\n\r\n\t\t\tvar j = 0;\r\n\t\t\tvar found = false;\r\n\t\t\twhile (j < group.length && !found) {\r\n\t\t\t\tif (comparer.equals(array[i], group[j])) {\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t}\r\n\t\t\t\tj++;\r\n\t\t\t}\r\n\r\n\t\t\tif (!found) {\r\n\t\t\t\tgroup.push(array[i]);\r\n\t\t\t}\r\n\t\t\ti++;\r\n\t\t}\r\n\t}\r\n\t\t\r\n\tvar result = [];\r\n\r\n\tdistinct(result, this);\r\n\tdistinct(result, second);\r\n\r\n\treturn result;\r\n}\r\n"]}