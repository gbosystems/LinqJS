{"version":3,"sources":["ArrayImpl/Array.Except.ts"],"names":[],"mappings":";;AAGA,KAAK,CAAC,SAAS,CAAC,MAAM,GAAG,UAAU,MAAkB,EAAE,QAAiC;IAEvF,IAAI,IAAI,GAAG,QAAQ,IAAI;QACtB,MAAM,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,KAAK,CAAC,EAAP,CAAO;KACzB,CAAC;IAEF,IAAI,CAAC,GAAG,EAAE,CAAC;IACX,IAAI,CAAC,GAAG,EAAE,CAAC;IAEX,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACtC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;IAChB,CAAC;IAED,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACxC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC;IAED,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,GAAG,CAAC;QACH,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,IAAI,KAAK,GAAG,KAAK,CAAC;QAClB,GAAG,CAAC;YACH,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC7B,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACf,KAAK,GAAG,IAAI,CAAC;YACd,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,CAAC,EAAE,CAAC;YACL,CAAC;QACF,CAAC,QAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAC;QAErB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACX,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAChB,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,CAAC,EAAE,CAAC;QACL,CAAC;IACF,CAAC,QAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAC;IAErB,IAAI,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAEzB,MAAM,CAAC,MAAM,CAAC;AACf,CAAC,CAAA","file":"Array.Except.js","sourcesContent":["import { IEqualityComparer } from \"../IEqualityComparer\";\r\n\r\n// Produces the set difference of two sequences by using the specified IEqualityComparer<T> to compare values.\r\nArray.prototype.except = function (second: Array<any>, comparer?: IEqualityComparer<any>): Array<any> {\r\n\r\n\tvar comp = comparer || {\r\n\t\tequals: (x, y) => x === y\r\n\t};\r\n\r\n\tvar a = [];\r\n\tvar b = [];\r\n\r\n\tfor (var i = 0; i < this.length; i++) {\r\n\t\ta[i] = this[i];\r\n\t}\r\n\r\n\tfor (var i = 0; i < second.length; i++) {\r\n\t\tb[i] = second[i];\r\n\t}\r\n\r\n\tvar i = 0;\r\n\tdo {\r\n\t\tvar j = 0;\r\n\t\tvar found = false;\r\n\t\tdo {\r\n\t\t\tif (comp.equals(a[i], b[j])) {\r\n\t\t\t\tb.splice(j, 1);\r\n\t\t\t\tfound = true;\r\n\t\t\t} else {\r\n\t\t\t\tj++;\r\n\t\t\t}\r\n\t\t} while(j < b.length)\r\n\r\n\t\tif (found) {\r\n\t\t\ta.splice(i, 1);\r\n\t\t} else {\r\n\t\t\ti++;\r\n\t\t}\r\n\t} while(i < a.length)\r\n\r\n\tvar result = a.concat(b);\r\n\r\n\treturn result;\r\n}"]}