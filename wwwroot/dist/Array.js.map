{"version":3,"sources":["Array.ts"],"names":[],"mappings":";;AAwNA,uCAAqC;AACrC,iCAA+B;AAC/B,iCAA+B;AAC/B,qCAAmC;AACnC,kCAAgC;AAChC,oCAAkC;AAClC,sCAAoC;AACpC,mCAAiC;AACjC,4CAA0C;AAC1C,sCAAoC;AACpC,uCAAqC;AACrC,gDAA8C;AAC9C,mCAAiC;AACjC,oCAAkC;AAClC,mCAAiC;AACjC,4CAA0C;AAC1C,qCAAmC;AACnC,uCAAqC;AACrC,uCAAqC;AACrC,iCAA+B;AAC/B,iCAA+B;AAC/B,qCAAmC;AACnC,+CAA6C;AAC7C,qCAAmC;AACnC,oCAAkC;AAClC,wCAAsC;AACtC,2CAAyC;AACzC,oCAAkC;AAClC,6CAA2C;AAC3C,kCAAgC;AAChC,uCAAqC;AACrC,iCAA+B;AAC/B,kCAAgC;AAChC,uCAAqC;AACrC,mCAAiC;AACjC,mCAAiC;AAEjC,2CAAyC;AACzC,qDAAmD","file":"Array.js","sourcesContent":["import { IComparer } from \"./IComparer\";\r\nimport { IEqualityComparer } from \"./IEqualityComparer\";\r\nimport { IGrouping } from \"./IGrouping\";\r\nimport { OrderedArray } from \"./OrderedArray\";\r\n\r\nexport {};\r\n\r\ndeclare global {\r\n\tinterface Array<T> {\r\n\r\n\t\t// Aggregate\r\n\t\taggregate( func : (accumulated: T, next: T) => T ): T;\r\n\r\n\t\taggregate<TAccumulate>(\r\n\t\t\tseed: TAccumulate,\r\n\t\t\tfunc: (accumulated: TAccumulate, next: T) => TAccumulate): TAccumulate;\r\n\r\n\t\taggregate<TAccumulate, TResult>(\r\n\t\t\tseed: TAccumulate,\r\n\t\t\tfunc: (accumulated: TAccumulate, next: T) => TAccumulate,\r\n\t\t\tresultSelector: (accumulated: T) => TResult): TResult;\r\n\r\n\t\t// All\r\n\t\tall(predicate: (obj: T) => boolean): boolean;\r\n\r\n\t\t// Any\r\n\t\tany(): boolean;\r\n\t\tany(predicate: (obj: T) => boolean): boolean;\r\n\r\n\t\t// Average\r\n\t\taverage(): number;\t\r\n\t\taverage(selector: (value: T) => number): number;\r\n\r\n\t\t// Cast\r\n\t\tcast<TOut>(): Array<TOut>;\r\n\r\n\t\t// Concat\r\n\t\tconcat(second: Array<T>): Array<T>;\r\n\r\n\t\t// Contains\r\n\t\tcontains(value: T): boolean;\r\n\t\tcontains(value: T, comparer: IEqualityComparer<T>): boolean;\r\n\r\n\t\t// Count\r\n\t\tcount(): number;\r\n\t\tcount(predicate: (obj: T) => boolean): number;\r\n\r\n\t\t// DefaultIfEmpty\r\n\t\tdefaultIfEmpty(): Array<T>;\r\n\t\tdefaultIfEmpty(defaultValue: T): Array<T>;\r\n\r\n\t\t// Distinct\r\n\t\tdistinct(): Array<any>;\r\n\t\tdistinct(comparer: IEqualityComparer<T>): Array<T>;\r\n\r\n\t\t// ElementAt\r\n\t\telementAt(index: number) : T;\r\n\r\n\t\t// ElementAtOrDefault\r\n\t\telementAtOrDefault(index: number): T;\r\n\r\n\t\t// Empty\r\n\t\tempty(): Array<T>;\r\n\r\n\t\t// Except\r\n\t\texcept(second: Array<T>): Array<T>;\r\n\t\texcept(second: Array<T>, comparer: IEqualityComparer<T>): Array<T>;\r\n\t\r\n\t\t// First\r\n\t\tfirst(): T;\r\n\t\tfirst(predicate: (obj: T) => boolean): T;\r\n\r\n\t\t// FirstOrDefault\r\n\t\tfirstOrDefault(): T;\r\n\t\tfirstOrDefault(predicate: (obj: T) => boolean): T;\r\n\r\n\t\t// GroupBy\r\n\t\tgroupBy<TKey>(\r\n\t\t\tkeySelector: (item: T) => TKey): Array<IGrouping<TKey, T>>;\r\n\r\n\t\tgroupBy<TKey>(\r\n\t\t\tkeySelector: (item: T) => TKey,\r\n\t\t\tcomparer: IEqualityComparer<TKey>): Array<IGrouping<TKey, T>>;\r\n\r\n\t\tgroupBy<TKey,  TElement>(\r\n\t\t\tkeySelector: (item: T) => TKey,\r\n\t\t\telementSelector: (item: T) => TElement): Array<IGrouping<TKey,  TElement>>;\r\n\r\n\t\tgroupBy<TKey, TElement>(\r\n\t\t\tkeySelector: (item: T) => TKey,\r\n\t\t\telementSelector: (item: T) => TElement,\r\n\t\t\tcomparer: IEqualityComparer<TKey>): Array<IGrouping<TKey, TElement>>;\r\n\r\n\t\tgroupBy<TKey, TElement, TResult>(\r\n\t\t\tkeySelector: (item: T) => TKey,\r\n\t\t\telementSelector: (item: T) => TElement,\r\n\t\t\tresultSelector: (key: TKey, collection: Array<TElement>) => TResult): Array<TResult>;\r\n\r\n\t\tgroupBy<TKey, TElement, TResult>(\r\n\t\t\tkeySelector: (item: T) => TKey,\r\n\t\t\telementSelector: (item: T) => TElement,\r\n\t\t\tresultSelector: (key: TKey, collection: Array<TElement>) => TResult,\r\n\t\t\tcomparer: IEqualityComparer<TKey>): Array<TResult>;\r\n\r\n\t\t// GroupJoin\r\n\t\tgroupJoin<TInner, TKey, TResult>(\r\n\t\t\tinner: Array<TInner>,\r\n\t\t\touterKeySelector: (item: T) => TKey,\r\n\t\t\tinnerKeySelector: (item: TInner) => TKey,\r\n\t\t\tresultSelector: (key: T, collection: Array<TInner>) => TResult): Array<TResult>;\r\n\r\n\t\tgroupJoin<TInner, TKey, TResult>(\r\n\t\t\tinner: Array<TInner>,\r\n\t\t\touterKeySelector: (item: T) => TKey,\r\n\t\t\tinnerKeySelector: (item: TInner) => TKey,\r\n\t\t\tresultSelector: (key: T, collection: Array<TInner>) => TResult,\r\n\t\t\tcomparer: IEqualityComparer<TKey>): Array<TResult>;\r\n\r\n\t\t// Intersect\r\n\t\tintersect(second: Array<T>): Array<T>;\r\n\t\tintersect(second: Array<T>, comparer: IEqualityComparer<T>): Array<T>;\r\n\r\n\t\t// Join\r\n\t\tinnerJoin<TInner, TKey, TResult>(\r\n\t\t\tinner: Array<TInner>,\r\n\t\t\touterKeySelector: (item: T) => TKey,\r\n\t\t\tinnerKeySelector: (item: TInner) => TKey,\r\n\t\t\tresultSelector: (outer: T, inner: TInner) => TResult): Array<TResult>;\r\n\r\n\t\tinnerJoin<TInner, TKey, TResult>(\r\n\t\t\tinner: Array<TInner>,\r\n\t\t\touterKeySelector: (item: T) => TKey,\r\n\t\t\tinnerKeySelector: (item: TInner) => TKey,\r\n\t\t\tresultSelector: (outer: T, inner: TInner) => TResult,\r\n\t\t\tcomparer: IEqualityComparer<TKey>): Array<TResult>;\r\n\r\n\t\t// Last\r\n\t\tlast(): T;\r\n\t\tlast(predicate: (obj: T) => boolean): T;\r\n\r\n\t\t// LastOrDefault\r\n\t\tlastOrDefault(): T;\r\n\t\tlastOrDefault(predicate: (obj: T) => boolean): T;\r\n\r\n\t\t// Max\r\n\t\tmax(): number;\r\n\t\tmax(selector: (value: T) => number): number;\r\n\r\n\t\t// Min\r\n\t\tmin(): number;\r\n\t\tmin(selector: (value: T) => number): number;\r\n\r\n\t\t// OfType\r\n\r\n\t\t// OrderBy\r\n\t\torderBy<TKey>(keySelector: (item: T) => TKey): OrderedArray<T>;\r\n\t\torderBy<TKey>(keySelector: (item: T) => TKey, comparer: IComparer<TKey>): OrderedArray<T>;\r\n\r\n\t\t// OrderByDescending\r\n\t\torderByDescending<TKey>(keySelector: (item: T) => TKey): OrderedArray<T>;\r\n\t\torderByDescending<TKey>(keySelector: (item: T) => TKey, comparer: IComparer<TKey>): OrderedArray<T>;\r\n\r\n\t\t// Reverse\r\n\t\treverse(): Array<T>;\r\n\r\n\t\t// Select\r\n\t\tselect<TResult>(selector: (item: T) => TResult): Array<TResult>;\r\n\t\tselect<TResult>(selector: (item: T, index: number) => TResult): Array<TResult>;\r\n\r\n\t\t// SelectMany\r\n\t\tselectMany<TResult, TCollection>(collectionSelector: (item: T) => Array<TCollection>): Array<TResult>;\r\n\t\tselectMany<TResult, TCollection>(collectionSelector: (item: T, index: number) => Array<TCollection>): Array<TResult>;\r\n\t\tselectMany<TResult, TCollection>(collectionSelector: (item: T) => Array<TCollection>, resultSelector: (parent: T, item: TCollection) => TResult): Array<TResult>;\r\n\t\tselectMany<TResult, TCollection>(collectionSelector: (item: T, index: number) => Array<TCollection>, resultSelector: (parent: T, item: TCollection) => TResult): Array<TResult>;\r\n\r\n\t\t// SequenceEqual\r\n\t\tsequenceEqual(second: Array<T>): boolean;\r\n\t\tsequenceEqual(second: Array<T>, comparer: IEqualityComparer<T>): boolean;\r\n\r\n\t\t// Single\r\n\t\tsingle(): T;\r\n\t\tsingle(predicate: (obj: T) => boolean): T;\r\n\r\n\t\t// SingleOrDefault\r\n\t\tsingleOrDefault(): T;\r\n\t\tsingleOrDefault(predicate: (obj: T) => boolean): T;\r\n\t\r\n\t\t// Skip\r\n\t\tskip(count: number): Array<T>;\r\n\r\n\t\t// SkipWhile\r\n\t\tskipWhile(predicate: (item: T) => boolean): Array<T>;\r\n\t\tskipWhile(predicate: (item: T, index: number) => boolean): Array<T>;\r\n\r\n\t\t// Sum\r\n\t\tsum(): number;\r\n\t\tsum(selector: (value: T) => number): number;\r\n\r\n\t\t// Take\r\n\t\ttake(count: number): Array<T>;\r\n\r\n\t\t// TakeWhile\r\n\t\ttakeWhile(predicate: (item: T) => boolean): Array<T>;\r\n\t\ttakeWhile(predicate: (item: T, index: number) => boolean): Array<T>;\r\n\r\n\t\t// Union\r\n\t\tunion(second: Array<T>): Array<T>;\r\n\t\tunion(second: Array<T>, comparer: IEqualityComparer<T>): Array<T>;\r\n\r\n\t\t// Where\r\n\t\twhere(predicate: (obj: T) => boolean): Array<T>;\r\n\t}\r\n}\r\n\r\n// Implementation references\r\n\r\nimport \"./ArrayImpl/Array.Aggregate\";\r\nimport \"./ArrayImpl/Array.All\";\r\nimport \"./ArrayImpl/Array.Any\";\r\nimport \"./ArrayImpl/Array.Average\";\r\nimport \"./ArrayImpl/Array.Cast\";\r\nimport \"./ArrayImpl/Array.Concat\";\r\nimport \"./ArrayImpl/Array.Contains\";\r\nimport \"./ArrayImpl/Array.Count\";\r\nimport \"./ArrayImpl/Array.DefaultIfEmpty\";\r\nimport \"./ArrayImpl/Array.Distinct\";\r\nimport \"./ArrayImpl/Array.ElementAt\";\r\nimport \"./ArrayImpl/Array.ElementAtOrDefault\";\r\nimport \"./ArrayImpl/Array.Empty\";\r\nimport \"./ArrayImpl/Array.Except\";\r\nimport \"./ArrayImpl/Array.First\";\r\nimport \"./ArrayImpl/Array.FirstOrDefault\";\r\nimport \"./ArrayImpl/Array.GroupBy\";\r\nimport \"./ArrayImpl/Array.InnerJoin\";\r\nimport \"./ArrayImpl/Array.Intersect\";\r\nimport \"./ArrayImpl/Array.Max\";\r\nimport \"./ArrayImpl/Array.Min\";\r\nimport \"./ArrayImpl/Array.OrderBy\";\r\nimport \"./ArrayImpl/Array.OrderByDescending\";\r\nimport \"./ArrayImpl/Array.Reverse\";\r\nimport \"./ArrayImpl/Array.Select\";\r\nimport \"./ArrayImpl/Array.SelectMany\";\r\nimport \"./ArrayImpl/Array.SequenceEqual\";\r\nimport \"./ArrayImpl/Array.Single\";\r\nimport \"./ArrayImpl/Array.SingleOrDefault\";\r\nimport \"./ArrayImpl/Array.Skip\";\r\nimport \"./ArrayImpl/Array.SkipWhile\";\r\nimport \"./ArrayImpl/Array.Sum\";\r\nimport \"./ArrayImpl/Array.Take\";\r\nimport \"./ArrayImpl/Array.TakeWhile\";\r\nimport \"./ArrayImpl/Array.Union\";\r\nimport \"./ArrayImpl/Array.Where\";\r\n\r\nimport \"./OrderedArrayImpl/Array.ThenBy\";\r\nimport \"./OrderedArrayImpl/Array.ThenByDescending\";"]}